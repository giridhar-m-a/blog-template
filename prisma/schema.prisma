generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String?
  isVerified Boolean @default(false)
  verifiedAt DateTime?
  avatar     profile?
  accounts      Account[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role Role @default(user)
  posts BlogPost[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

enum Role{
  user
  admin
  manager
  seo
}

model profile{
  id Int @id @default(autoincrement())
  fileName String 
  publicId String @unique 
  url String @unique
  userId String @unique
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
}

model image{
  id Int @id @default(autoincrement())
  publicId String @unique
  fileName String 
  url String @unique
  altText String
  height Int
  width Int
  blogPosts BlogPost[]
}

model YoutubeVideo{
  id Int @id @default(autoincrement())
  url String @unique
  title String
}

model PostCategory{
    id Int @id @default(autoincrement())
    slug String @unique 
    name String @unique
    description String?
    posts BlogPost[]
}

model BlogPost{
  id Int @id @default(autoincrement())
  slug String @unique
  title String
  description String
  imageId Int? @unique
  featuredImage image? @relation(fields: [imageId], references: [id], onDelete: Cascade)
  content String
  category PostCategory[]
  keywords String?
  authorId String
  author User @relation(references: [id], fields: [authorId], onDelete: Cascade)
  isPublished Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model token{
  id Int @id @default(autoincrement())
  token String @unique
  email String @unique
  purpose TokenPurpose @default(verification)
}

enum TokenPurpose{
  verification
  forgetPassword
  newUser
  review
}